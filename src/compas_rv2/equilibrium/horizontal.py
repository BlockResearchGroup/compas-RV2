from compas_rv2.datastructures import FormDiagram
from compas_rv2.datastructures import ForceDiagram

from compas_tna.equilibrium import horizontal_nodal


__all__ = ['horizontal_nodal_proxy']


def horizontal_nodal_proxy(formdata, forcedata, *args, **kwargs):
    """RPC proxy for node-per-node calculation of horizontal equilibrium.

    Parameters
    ----------
    formdata : dict
        The data dictionary of a :class:`FormDiagram`.
    forcedata : dict
        The data dictionary of a :class:`ForceDiagram`.

    Additional Parameters
    ---------------------
    alpha : int, optional
        Weighting factor for computing target vectors for parallelisation
        of corresponding edges of Form and ForceDiagram.
        Default is `100` which means that the target vectors are equal to the
        FormDiagram edges.
    kmax : int, optional
        Maximum number of iterartions.
        Default is `100`.
    display : bool, optional
        Display all messages generated by the solver.
        Default is `True`.

    Returns
    -------
    tuple
        0. The updated data dict of the FormDiagram.
        1. The updated data dict of the ForceDiagram.

    """
    form = FormDiagram.from_data(formdata)
    force = ForceDiagram.from_data(forcedata)
    horizontal_nodal(form, force, *args, **kwargs)
    return form.to_data(), force.to_data()


# ==============================================================================
# Main
# ==============================================================================

if __name__ == '__main__':
    pass
